openapi: 3.0.3
info:
  title: Corkboard API
  description: API für die Verwaltung von Chats, Nachrichten sowie die dazugehörigen User.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Test Server
tags:
  - name: user
    description: Verwaltung von User
  - name: chat
    description: Verwaltung von Chats und Nachrichten
paths:
  /user:
    post:
      tags:
        - user
      summary: User einloggen
      description: User werden über die Datenbank eingeloggt.
      operationId: Userlogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Benutzer erfolgreich eingeloggt
          content:
            text/plain:
              schema:
                type: string
                example: "Benutzer erfolgreich eingeloggt"
        '403':
          description: Benutzername oder Passwort falsch
          content:
            text/plain:
              schema:
                type: string
                example: "Benutzername oder Passwort falsch"
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
                example: "Interner Serverfehler"
  /newUser:
    post:
      tags:
        - user
      summary: Neuen Benutzer erstellen
      description: Erstellt einen neuen Benutzer in der Datenbank.
      operationId: newUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Benutzer erfolgreich erstellt
          content:
            text/plain:
              schema:
                type: string
                example: "Benutzer erfolgreich erstellt"
        '400':
          description: Benutzername und Passwort erforderlich
          content:
            text/plain:
              schema:
                type: string
                example: "Benutzername und Passwort erforderlich"
        '409':
          description: Benutzername bereits in Verwendung
          content:
            text/plain:
              schema:
                type: string
                example: "Benutzername bereits in Verwendung"
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
                example: "Interner Serverfehler"
  /updateInfo:
    put:
      tags:
        - user
      summary: Benutzerinformationen aktualisieren
      description: Aktualisiert die Informationen eines bestehenden Benutzers wie E-Mail, Name und Telefonnummer.
      operationId: updateInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                phone:
                  type: string
      responses:
        '201':
          description: Benutzerinformationen erfolgreich aktualisiert
          content:
            text/plain:
              schema:
                type: string
                example: "Benutzerinformationen erfolgreich aktualisiert"
        '400':
          description: Benutzer nicht gefunden
          content:
            text/plain:
              schema:
                type: string
                example: "Benutzer nicht gefunden"
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
                example: "Interner Serverfehler"
  /findUser:
    get:
      tags:
        - user
      summary: Benutzer über UserID suchen
      description: Sucht einen Benutzer in der Datenbank anhand der Benutzer-ID und liefert UserID und Benutzername.
      operationId: findUser
      parameters:
        - name: UserId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Erfolgreiche Abfrage
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: string
                  username:
                    type: string
              examples:
                example:
                  value:
                    userID: "123"
                    username: "john_doe"
        '400':
          description: Benutzer nicht gefunden
          content:
            text/plain:
              schema:
                type: string
                example: "Benutzer nicht gefunden"
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
                example: "Interner Serverfehler"
  /addChat:
    post:
      tags:
        - chat
      summary: Neuen Chat erstellen
      description: Erstellt einen neuen Chat zwischen zwei Benutzern.
      operationId: createChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                User1:
                  type: string
                User2:
                  type: string
      responses:
        '201':
          description: Chat erfolgreich erstellt
          content:
            application/json:
              schema:
                type: object
                properties:
                  chatID:
                    type: integer
                    example: 123
                  message:
                    type: string
                    example: "Chat erfolgreich erstellt"
        '400':
          description: Benutzer fehlt
          content:
            text/plain:
              schema:
                type: string
                example: "Benutzer fehlt"
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
                example: "Interner Serverfehler"
  /removeChat:
    delete:
      tags:
        - chat
      summary: Chat löschen
      description: Löscht einen bestehenden Chat anhand der Chat-ID aus der Datenbank inklusive allen Nachrichten.
      operationId: deleteChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ChatID:
                  type: integer
      responses:
        '201':
          description: Chat erfolgreich gelöscht
          content:
            text/plain:
              schema:
                type: string
                example: "Chat erfolgreich gelöscht"
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
                example: "Interner Serverfehler"
  /Message:
    post:
      tags:
        - chat
      summary: Nachricht speichern
      description: Speichert eine Nachricht in einem bestimmten Chat.
      operationId: saveMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ChatID:
                  type: integer
                SenderUserID:
                  type: integer
                ReceiverUserID:
                  type: integer
                TextMessage:
                  type: string
      responses:
        '201':
          description: Nachricht erfolgreich gespeichert
          content:
            text/plain:
              schema:
                type: string
                example: "Nachricht erfolgreich gespeichert"
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
                example: "Interner Serverfehler"
  /Chat:
    get:
      tags:
        - chat
      summary: Chat abrufen
      description: Ruft alle Nachrichten eines bestimmten Chats anhand der Chat-ID ab.
      operationId: getChat
      parameters:
        - name: ChatID
          in: query
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Erfolgreiche Abfrage
          content:
            application/json:
              schema:
                type: object
                properties:
                  chatHistory:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  message:
                    type: string
                    example: "Chat abgerufen"
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
                example: "Interner Serverfehler"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        email:
          type: string
        name:
          type: string
        phone:
          type: string
    Message:
      type: object
      properties:
        ChatID:
          type: integer
        SenderUserID:
          type: integer
        ReceiverUserID:
          type: integer
        TextMessage:
          type: string
